/* Generated By:JavaCC: Do not edit this line. SimpleDBMSParser.java */
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
import java.io.File;

import java.util.ArrayList;

public class SimpleDBMSParser implements SimpleDBMSParserConstants {
        // TODO : jj lexical state : space in quote
        public static void main(String args []) throws ParseException
        {
                // init
                Environment myDbEnvironment = null;
                Database db = null;
                EnvironmentConfig envConfig = new EnvironmentConfig();
                envConfig.setAllowCreate(true);
                myDbEnvironment = new Environment(new File("db/"), envConfig);
                DatabaseConfig dbConfig = new DatabaseConfig();
                dbConfig.setAllowCreate(true);
                dbConfig.setSortedDuplicates(true);
                dbConfig.setDeferredWrite(true);
                db = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);
                SimpleDBMSParser parser = new SimpleDBMSParser(System.in);

                DBProcessor dbp = new DBProcessor(db);
                System.out.print("DB_2016-12817> ");

                ArrayList < Query > ql;
                String s;
                while (true)
                {
                        try
                        {
                                ql = parser.command();
                                if (ql == null) break;

                                if (dbp.processQuery(ql))
                                        parser.ReInit(System.in);
                        }
                        catch (Exception e)
                        {
                                //e.printStackTrace();
                                System.out.println("Syntax error");
                                e.printStackTrace();
                                parser.ReInit(System.in);
                        }
                        System.out.print("DB_2016-12817> ");
                }
                if (db != null) db.close();
                if (myDbEnvironment != null) myDbEnvironment.close();
        }

// below are all the non-terminals for parsing.
  final public ArrayList < Query > command() throws ParseException {
        ArrayList < Query > ql;
    if (jj_2_1(2)) {
      ql = queryList();
                        {if (true) return ql;}
    } else if (jj_2_2(2)) {
      jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
                        {if (true) return null;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < Query > queryList() throws ParseException {
        ArrayList < Query > ql = new ArrayList < Query > ();
        Query q;
    label_1:
    while (true) {
      q = query();
      jj_consume_token(SEMICOLON);
                        ql.add(q);
                        {if (true) return ql;}
      if (jj_2_3(2)) {
        ;
      } else {
        break label_1;
      }
    }
                {if (true) return ql;}
    throw new Error("Missing return statement in function");
  }

  final public Query query() throws ParseException {
        Query q = new Query();
        CreateTableQuery cq;
        String dq;
        String eq;
        SelectQuery sq;
        InsertQuery iq;
        DeleteQuery tq;
    if (jj_2_4(3)) {
      cq = createTableQuery();
                                q.type = Query.QUERY_CREATE_TABLE;
                                q.cq = cq;
    } else if (jj_2_5(2)) {
      dq = dropTableQuery();
                                q.type = Query.QUERY_DROP_TABLE;
                                q.dq = dq;
    } else if (jj_2_6(2)) {
      eq = descQuery();
                                q.type = Query.QUERY_DESC;
                                q.eq = eq;
    } else if (jj_2_7(2)) {
      sq = selectQuery();
                                q.type = Query.QUERY_SELECT;
                                q.sq = sq;
    } else if (jj_2_8(2)) {
      iq = insertQuery();
                                q.type = Query.QUERY_INSERT;
                                q.iq = iq;
    } else if (jj_2_9(2)) {
      tq = deleteQuery();
                                q.type = Query.QUERY_DELETE;
                                q.tq = tq;
    } else if (jj_2_10(2)) {
      showTablesQuery();
                                q.type = Query.QUERY_SHOW_TABLES;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTableQuery createTableQuery() throws ParseException {
        String s;
        ArrayList < TableElemInfo > tl;
        CreateTableQuery ctq = new CreateTableQuery();
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    s = tableName();
    tl = tableElementList();
                ctq.tableName = s;
                ctq.tl = tl;
                {if (true) return ctq;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < TableElemInfo > tableElementList() throws ParseException {
        ArrayList < TableElemInfo > tl = new ArrayList < TableElemInfo > ();
        TableElemInfo e;
    jj_consume_token(LEFT_PAREN);
    e = tableElement();
                tl.add(e);
    label_2:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      e = tableElement();
                        tl.add(e);
    }
    jj_consume_token(RIGHT_PAREN);
                {if (true) return tl;}
    throw new Error("Missing return statement in function");
  }

  final public TableElemInfo tableElement() throws ParseException {
        TableElemInfo t;
        ColumnInfo c;
    if (jj_2_12(2)) {
      c = columnDefinition();
                        t = new TableElemInfo();
                        t.type = TableElemInfo.ELEM_COLUMN;
                        t.ci = c;
    } else if (jj_2_13(2)) {
      t = tableConstraintDefinition();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnInfo columnDefinition() throws ParseException {
        ColumnInfo c;
        String cn;
        int dt;
    cn = columnName();
    dt = dataType();
                c = new ColumnInfo(cn, dt);
    if (jj_2_14(2)) {
      jj_consume_token(NOT);
      jj_consume_token(NULL);
                c.notnull = true;
    } else {
      ;
    }
                {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public TableElemInfo tableConstraintDefinition() throws ParseException {
        TableElemInfo ti = new TableElemInfo();
        ArrayList < String > p;
        ForeignKeyInfo f;
    if (jj_2_15(2)) {
      p = primaryKeyConstraint();
                        ti.type = TableElemInfo.ELEM_PRIMARY;
                        ti.pi = p;
    } else if (jj_2_16(2)) {
      f = referentialConstraint();
                        ti.type = TableElemInfo.ELEM_FOREIGN;
                        ti.fi = f;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ti;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < String > primaryKeyConstraint() throws ParseException {
        ArrayList < String > al;
    jj_consume_token(PRIMARY);
    jj_consume_token(KEY);
    al = columnNameList();
                {if (true) return al;}
    throw new Error("Missing return statement in function");
  }

  final public ForeignKeyInfo referentialConstraint() throws ParseException {
        ArrayList < String > al1, al2;
        String tn;
    jj_consume_token(FOREIGN);
    jj_consume_token(KEY);
    al1 = columnNameList();
    jj_consume_token(REFERENCES);
    tn = tableName();
    al2 = columnNameList();
                {if (true) return new ForeignKeyInfo(al1, tn, al2);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < String > columnNameList() throws ParseException {
        ArrayList < String > al = new ArrayList < String > ();
        String s;
    jj_consume_token(LEFT_PAREN);
    s = columnName();
                al.add(s);
    label_3:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      s = columnName();
                        al.add(s);
    }
    jj_consume_token(RIGHT_PAREN);
                {if (true) return al;}
    throw new Error("Missing return statement in function");
  }

  final public int dataType() throws ParseException {
        int v;
        Token s;
    if (jj_2_18(2)) {
      jj_consume_token(INT);
                        {if (true) return ColumnInfo.DATATYPE_INT;}
    } else if (jj_2_19(2)) {
      jj_consume_token(CHAR);
      jj_consume_token(LEFT_PAREN);
      s = jj_consume_token(INT_VALUE);
      jj_consume_token(RIGHT_PAREN);
                        v = Integer.parseInt(s.image);
                        if (v < 1) {if (true) return ColumnInfo.DATATYPE_INVALID;}
                        else {if (true) return v;}
    } else if (jj_2_20(2)) {
      jj_consume_token(DATE);
                        {if (true) return ColumnInfo.DATATYPE_DATE;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String tableName() throws ParseException {
        Token s;
    s = jj_consume_token(LEGAL_IDENTIFIER);
                {if (true) return s.image.toLowerCase();}
    throw new Error("Missing return statement in function");
  }

  final public String columnName() throws ParseException {
        Token s;
    s = jj_consume_token(LEGAL_IDENTIFIER);
                {if (true) return s.image.toLowerCase();}
    throw new Error("Missing return statement in function");
  }

  final public String dropTableQuery() throws ParseException {
        String tn;
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    tn = tableName();
                {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public String descQuery() throws ParseException {
        String tn;
    jj_consume_token(DESC);
    tn = tableName();
                {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public void showTablesQuery() throws ParseException {
    jj_consume_token(SHOW);
    jj_consume_token(TABLES);
                {if (true) return;}
  }

  final public SelectQuery selectQuery() throws ParseException {
        ArrayList<NameInfo > nil;
        SelectQuery sq;
    jj_consume_token(SELECT);
    nil = selectList();
    sq = tableExpression();
                sq.sell = nil;
                {if (true) return sq;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<NameInfo > selectList() throws ParseException {
        ArrayList<NameInfo > nil = new ArrayList<NameInfo >();
        NameInfo ni;
    if (jj_2_22(2)) {
      jj_consume_token(WILDCARD);
                        {if (true) return null;}
    } else if (jj_2_23(2)) {
      ni = selectedColumn();
                                nil.add(ni);
      label_4:
      while (true) {
        if (jj_2_21(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMMA);
        ni = selectedColumn();
                                        nil.add(ni);
      }
                        {if (true) return nil;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NameInfo selectedColumn() throws ParseException {
        NameInfo ni = new NameInfo();
        ni.tableName = null;
        ni.alias = null;
    if (jj_2_24(2)) {
      ni.tableName = tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    ni.colName = columnName();
    if (jj_2_25(2)) {
      jj_consume_token(AS);
      ni.alias = columnName();
    } else {
      ;
    }
                {if (true) return ni;}
    throw new Error("Missing return statement in function");
  }

  final public SelectQuery tableExpression() throws ParseException {
        SelectQuery sq = new SelectQuery();
        sq.where = null;
    sq.from = fromClause();
    if (jj_2_26(2)) {
      sq.where = whereClause();
    } else {
      ;
    }
                {if (true) return sq;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<NameInfo> fromClause() throws ParseException {
        ArrayList<NameInfo> trl;
    jj_consume_token(FROM);
    trl = tableReferenceList();
                {if (true) return trl;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<NameInfo> tableReferenceList() throws ParseException {
        ArrayList<NameInfo > trl = new ArrayList<NameInfo >();
        NameInfo ni;
    ni = referedTable();
                trl.add(ni);
    label_5:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(COMMA);
      ni = referedTable();
                        trl.add(ni);
    }
                {if (true) return trl;}
    throw new Error("Missing return statement in function");
  }

  final public NameInfo referedTable() throws ParseException {
        NameInfo ni = new NameInfo();
        ni.colName = null;
    ni.tableName = tableName();
    if (jj_2_28(2)) {
      jj_consume_token(AS);
      ni.alias = tableName();
    } else {
      ;
    }
                {if (true) return ni;}
    throw new Error("Missing return statement in function");
  }

  final public BoolExprInfo whereClause() throws ParseException {
        BoolExprInfo be;
    jj_consume_token(WHERE);
    be = booleanValueExpression();
                {if (true) return be;}
    throw new Error("Missing return statement in function");
  }

  final public BoolExprInfo booleanValueExpression() throws ParseException {
        BoolExprInfo ret = new BoolExprInfo(BoolExprInfo.EXPRTYPE_OR);
        BoolExprInfo be;
    be = booleanTerm();
                ret.add(be);
    label_6:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(OR);
      be = booleanTerm();
                        ret.add(be);
    }
                if (ret.size() <= 1)
                        {if (true) return be;}
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BoolExprInfo booleanTerm() throws ParseException {
        BoolExprInfo ret = new BoolExprInfo(BoolExprInfo.EXPRTYPE_AND);
        BoolExprInfo be;
    be = booleanFactor();
                ret.add(be);
    label_7:
    while (true) {
      if (jj_2_30(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(AND);
      be = booleanFactor();
                        ret.add(be);
    }
                if (ret.size() <= 1)
                        {if (true) return be;}
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BoolExprInfo booleanFactor() throws ParseException {
        boolean not = false;
        BoolExprInfo be;
    if (jj_2_31(2)) {
      jj_consume_token(NOT);
                not = true;
    } else {
      ;
    }
    be = booleanTest();
                if (not)
                        be.invert();
                {if (true) return be;}
    throw new Error("Missing return statement in function");
  }

  final public BoolExprInfo booleanTest() throws ParseException {
        BoolExprInfo be;
    if (jj_2_32(2)) {
      be = predicate();
    } else if (jj_2_33(2)) {
      be = parenthesizedBE();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return be;}
    throw new Error("Missing return statement in function");
  }

  final public BoolExprInfo parenthesizedBE() throws ParseException {
        BoolExprInfo be;
    jj_consume_token(LEFT_PAREN);
    be = booleanValueExpression();
    jj_consume_token(RIGHT_PAREN);
                {if (true) return be;}
    throw new Error("Missing return statement in function");
  }

  final public BoolExprInfo predicate() throws ParseException {
        CompPredicateInfo cp;
        BoolExprInfo be;
    if (jj_2_34(4)) {
      cp = comparisonPredicate();
                                {if (true) return new BoolExprInfo(cp);}
    } else if (jj_2_35(2)) {
      be = nullPredicate();
                                {if (true) return be;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CompPredicateInfo comparisonPredicate() throws ParseException {
        Operand co1, co2;
        Token op;
    co1 = compOperand();
    op = jj_consume_token(COMP_OP);
    co2 = compOperand();
                {if (true) return new CompPredicateInfo(co1, op.image, co2);}
    throw new Error("Missing return statement in function");
  }

  final public Operand compOperand() throws ParseException {
        CellInfo ci;
        String tn = null, cn;
    if (jj_2_37(2)) {
      ci = comparableValue();
                        {if (true) return new Operand(ci);}
    } else if (jj_2_38(2)) {
      if (jj_2_36(2)) {
        tn = tableName();
        jj_consume_token(PERIOD);
      } else {
        ;
      }
      cn = columnName();
                        {if (true) return new Operand(tn, cn);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CellInfo comparableValue() throws ParseException {
        Token i, s, d;
    if (jj_2_39(2)) {
      i = jj_consume_token(INT_VALUE);
                        {if (true) return new CellInfo(Integer.parseInt(i.image));}
    } else if (jj_2_40(2)) {
      s = jj_consume_token(CHAR_STRING);
                        {if (true) return new CellInfo(s.image, false);}
    } else if (jj_2_41(2)) {
      d = jj_consume_token(DATE_VALUE);
                        {if (true) return new CellInfo(d.image, true);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BoolExprInfo nullPredicate() throws ParseException {
        String tn = null, cn;
        boolean nop;
    if (jj_2_42(2)) {
      tn = tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    cn = columnName();
    nop = nullOperation();
                {if (true) return new BoolExprInfo(tn, cn, nop);}
    throw new Error("Missing return statement in function");
  }

  final public boolean nullOperation() throws ParseException {
        boolean r = false;
    jj_consume_token(IS);
    if (jj_2_43(2)) {
      jj_consume_token(NOT);
                        r = true;
    } else {
      ;
    }
    jj_consume_token(NULL);
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public InsertQuery insertQuery() throws ParseException {
        String tn;
        InsertQuery iq;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    tn = tableName();
    iq = insertCNS();
                iq.tableName = tn;
                {if (true) return iq;}
    throw new Error("Missing return statement in function");
  }

  final public InsertQuery insertCNS() throws ParseException {
        InsertQuery iq = new InsertQuery();
        iq.cols = null;
    if (jj_2_44(2)) {
      iq.cols = columnNameList();
    } else {
      ;
    }
    iq.vals = valueList();
                {if (true) return iq;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<CellInfo > valueList() throws ParseException {
        ArrayList<CellInfo > cil = new ArrayList<CellInfo >();
        CellInfo ci;
    jj_consume_token(VALUES);
    jj_consume_token(LEFT_PAREN);
    ci = value();
                cil.add(ci);
    label_8:
    while (true) {
      if (jj_2_45(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(COMMA);
      ci = value();
                        cil.add(ci);
    }
    jj_consume_token(RIGHT_PAREN);
                {if (true) return cil;}
    throw new Error("Missing return statement in function");
  }

  final public CellInfo value() throws ParseException {
        CellInfo ci;
    if (jj_2_46(2)) {
      jj_consume_token(NULL);
                        {if (true) return new CellInfo(null);}
    } else if (jj_2_47(2)) {
      ci = comparableValue();
                        {if (true) return ci;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public DeleteQuery deleteQuery() throws ParseException {
        DeleteQuery tq = new DeleteQuery();
        BoolExprInfo be = null;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    tq.tableName = tableName();
    if (jj_2_48(2)) {
      be = whereClause();
    } else {
      ;
    }
                tq.where = be;
                {if (true) return tq;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_3_12() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(SHOW)) return true;
    if (jj_scan_token(TABLES)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(INTO)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(DESC)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(DATE_VALUE)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(CHAR_STRING)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(DATE)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(INT_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(COMP_OP)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(FOREIGN)) return true;
    if (jj_scan_token(KEY)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(PRIMARY)) return true;
    if (jj_scan_token(KEY)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(WILDCARD)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    if (jj_3_3()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(EXIT)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_23()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SimpleDBMSParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[48];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SimpleDBMSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleDBMSParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SimpleDBMSParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SimpleDBMSParser(SimpleDBMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SimpleDBMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 48; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
